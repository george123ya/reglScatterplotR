% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/my_scatterplot.R
\name{my_scatterplot}
\alias{my_scatterplot}
\title{Scalable scatterplot HTML widget}
\usage{
my_scatterplot(
  x,
  y,
  colorBy = NULL,
  data = NULL,
  size = 3,
  categorical_palette = "Set1",
  continuous_palette = "viridis",
  xlab = "X",
  ylab = "Y",
  showAxes = TRUE,
  showTooltip = TRUE,
  pointColor = NULL,
  opacity = 0.8,
  backgroundColor = NULL,
  width = NULL,
  height = NULL,
  elementId = NULL
)
}
\arguments{
\item{x}{numeric vector of x coordinates, or a column name for x in \code{data}.}

\item{y}{numeric vector of y coordinates, or a column name for y in \code{data}.}

\item{colorBy}{factor/chr/numeric vector to color by, or a column name for colorBy in \code{data}.}

\item{data}{optional data.frame containing the data to plot.}

\item{size}{point size.}

\item{categorical_palette}{string name for a categorical RColorBrewer palette (e.g., "Set1", "Set2").}

\item{continuous_palette}{string name for a continuous viridisLite palette (e.g., "viridis", "inferno").}

\item{xlab}{x-axis label.}

\item{ylab}{y-axis label.}

\item{showAxes}{logical; show axes and labels (default TRUE).}

\item{showTooltip}{logical; enable hover tooltips (default TRUE).}

\item{pointColor}{optional uniform hex color for points (e.g., "#FF0000"); overrides colorBy.}

\item{opacity}{numeric; point opacity (0-1, default 0.8).}

\item{backgroundColor}{optional hex color for canvas background (default white).}

\item{width}{fixed width of the canvas in pixels (default is resizable).}

\item{height}{fixed height of the canvas in pixels (default is resizable).}

\item{elementId}{specify id for the containing div.}
}
\description{
Create an interactive scalable scatterplot using the \code{regl-scatterplot} JavaScript library.
}
\examples{
data(quakes)

# Continuous color scale
my_scatterplot(quakes$long, quakes$lat, colorBy = quakes$depth, 
               continuous_palette = "inferno", showAxes = TRUE, showTooltip = TRUE)

# No axes, uniform color, custom opacity
my_scatterplot(quakes$long, quakes$lat, pointColor = "#0072B2", 
               showAxes = FALSE, opacity = 0.6, width = 800, height = 600)

# Add a categorical variable for demonstration
quakes$magType <- ifelse(quakes$mag > 5, "high", "low")

# Pass a data.frame with categorical data and a custom palette
my_scatterplot(
  x = "long",
  y = "lat",
  colorBy = "magType",
  data = quakes,
  categorical_palette = "Set2",
  backgroundColor = "#F0F8FF"
)

}
